# Clase Fichas

class Fichas:
    # Constructor. Crea todas las fichas posibles del juego.
    # Nota: todas las fichas se han comprobado y están definidas correcta-
    #       mente
    def __init__(self):
        self.dicFichas = {'F': [[(0, 1), (0, 2), (1, 0), (1, 1), (2, 1)],
                                [(0, 1), (1, 0), (1, 1), (1, 2), (2, 2)],
                                [(0, 1), (1, 1), (1, 2), (2, 0), (2, 1)],
                                [(0, 0), (1, 0), (1, 1), (1, 2), (2, 1)],
                                [(0, 1), (1, 0), (1, 1), (2, 1), (2, 2)],
                                [(0, 2), (1, 0), (1, 1), (1, 2), (2, 1)],
                                [(0, 0), (0, 1), (1, 1), (1, 2), (2, 1)],
                                [(0, 1), (1, 0), (1, 1), (1, 2), (2, 0)]],

                          'I': [[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)],
                                [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]],

                          'L': [[(0, 0), (1, 0), (2, 0), (3, 0), (3, 1)],
                                [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0)],
                                [(0, 0), (0, 1), (1, 1), (2, 1), (3, 1)],
                                [(0, 3), (1, 0), (1, 1), (1, 2), (1, 3)],
                                [(0, 0), (0, 1), (1, 0), (2, 0), (3, 0)],
                                [(0, 0), (1, 0), (1, 1), (1, 2), (1, 3)],
                                [(0, 1), (1, 1), (2, 1), (3, 0), (3, 1)],
                                [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3)]],

                          'N': [[(0, 1), (1, 0), (1, 1), (2, 0), (3, 0)],
                                [(0, 0), (0, 1), (0, 2), (1, 2), (1, 3)],
                                [(0, 1), (1, 1), (2, 0), (2, 1), (3, 0)],
                                [(0, 0), (0, 1), (1, 1), (1, 2), (1, 3)],
                                [(0, 0), (1, 0), (2, 0), (2, 1), (3, 1)],
                                [(0, 2), (0, 3), (1, 0), (1, 1), (1, 2)],
                                [(0, 0), (1, 0), (1, 1), (2, 1), (3, 1)],
                                [(0, 1), (0, 2), (0, 3), (1, 0), (1, 1)]],

                          'P': [[(0, 1), (1, 0), (1, 1), (2, 0), (2, 1)],
                                [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2)],
                                [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0)],
                                [(0, 0), (0, 1), (0, 2), (1, 1), (1, 2)],
                                [(0, 0), (0, 1), (1, 0), (1, 1), (2, 1)],
                                [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1)],
                                [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)],
                                [(0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]],

                          'T': [[(0, 0), (0, 1), (0, 2), (1, 1), (2, 1)],
                                [(0, 2), (1, 0), (1, 1), (1, 2), (2, 2)],
                                [(0, 1), (1, 1), (2, 0), (2, 1), (2, 2)],
                                [(0, 0), (1, 0), (1, 1), (1, 2), (2, 0)]],

                          'U': [[(0, 0), (0, 2), (1, 0), (1, 1), (1, 2)],
                                [(0, 0), (0, 1), (1, 0), (2, 0), (2, 1)],
                                [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2)],
                                [(0, 0), (0, 1), (1, 1), (2, 0), (2, 1)]],

                          'V': [[(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)],
                                [(0, 0), (0, 1), (0, 2), (1, 0), (2, 0)],
                                [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)],
                                [(0, 2), (1, 2), (2, 0), (2, 1), (2, 2)]],

                          'W': [[(0, 0), (1, 0), (1, 1), (2, 1), (2, 2)],
                                [(0, 1), (0, 2), (1, 0), (1, 1), (2, 0)],
                                [(0, 0), (0, 1), (1, 1), (1, 2), (2, 2)],
                                [(0, 2), (1, 1), (1, 2), (2, 0), (2, 1)]],

                          'X': [[(0, 1), (1, 0), (1, 1), (1, 2), (2, 1)]],

                          'Y': [[(0, 1), (1, 0), (1, 1), (2, 1), (3, 1)],
                                [(0, 2), (1, 0), (1, 1), (1, 2), (1, 3)],
                                [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0)],
                                [(0, 0), (0, 1), (0, 2), (0, 3), (1, 1)],
                                [(0, 1), (1, 1), (2, 0), (2, 1), (3, 1)],
                                [(0, 0), (0, 1), (0, 2), (0, 3), (1, 2)],
                                [(0, 0), (1, 0), (1, 1), (2, 0), (3, 0)],
                                [(0, 1), (1, 0), (1, 1), (1, 2), (1, 3)]],

                          'Z': [[(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)],
                                [(0, 2), (1, 0), (1, 1), (1, 2), (2, 0)],
                                [(0, 1), (0, 2), (1, 1), (2, 0), (2, 1)],
                                [(0, 0), (1, 0), (1, 1), (1, 2), (2, 2)]]
                          }

    # Método que dibuja las fichas en pantalla de un tipo concreto
    def dibujarFichas(self, tipoFicha):

        # Por cada una de las fichas del tipo indicado...
        for ficha in self.dicFichas[tipoFicha]:
            # ...iremos dibujandolo casilla a casilla si corresponde
            for i in range(0, 5, 1):
                for j in range(0, 5, 1):
                    if (i,j) in ficha:
                        print(" x ", end="")
                    else:
                        print("   ", end="")

                print("")

    # Método que lista por pantalla todas las fichas disponibles
    def listadoFichas(self):
        for keys, values in self.dicFichas.items():
            print(keys)
            print(values)

    # Método que se utiliza para coger una fecha de todas las disponibles
    def cogerFicha (self, ficha, numero):
        return self.dicFichas[ficha][numero]